--- /home/andre/.local/pipx/venvs/ansible/lib/python3.11/site-packages/ansible/../ansible_collections/community/general/plugins/modules/lxd_container.py	2023-04-26 12:01:46.385614672 +0200
+++ ../../library/lxd_container.py	2023-05-03 15:22:51.355963847 +0200
@@ -141,6 +141,15 @@
         required: false
         default: false
         type: bool
+    wait_for_ipv4_interfaces:
+        description:
+          - A list of interfaces for which C(wait_for_ipv4_addresses) will
+            wait.  This is useful if the container is running a nested docker,
+            in which case it might have interfaces which never acquires ipv4
+            addresses.
+        required: false
+        default: [] (wait for all interfaces)
+        type: list
     wait_for_container:
         description:
             - If set to C(true), the tasks will wait till the task reports a
@@ -461,6 +470,7 @@
 
         self.timeout = self.module.params['timeout']
         self.wait_for_ipv4_addresses = self.module.params['wait_for_ipv4_addresses']
+        self.wait_for_ipv4_interfaces = self.module.params['wait_for_ipv4_interfaces']
         self.force_stop = self.module.params['force_stop']
         self.addresses = None
         self.target = self.module.params['target']
@@ -588,6 +598,8 @@
         ignore_devices = ['lo'] if ignore_devices is None else ignore_devices
         data = (self._get_instance_state_json() or {}).get('metadata', None) or {}
         network = dict((k, v) for k, v in (data.get('network', None) or {}).items() if k not in ignore_devices)
+        if self.wait_for_ipv4_interfaces:
+            network = dict((k, v) for k, v in network.items() if k in self.wait_for_ipv4_interfaces)
         addresses = dict((k, [a['address'] for a in v['addresses'] if a['family'] == 'inet']) for k, v in network.items())
         return addresses
 
@@ -829,6 +841,9 @@
                 type='bool',
                 default=False,
             ),
+            wait_for_ipv4_interfaces=dict(
+                type='list',
+            ),
             force_stop=dict(
                 type='bool',
                 default=False,
