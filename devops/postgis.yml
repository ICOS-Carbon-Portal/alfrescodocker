# Create users for the cplog database:
#   deploy postgis cplog

- hosts: postgis_host
  vars:
    postgis_ip: "{{ _lxd.addresses.eth0 | first }}"
  vars_files:
    - vault.yml
  tasks:
    - name: Create postgis storage pool
      tags: pool
      shell: >-
        /snap/bin/lxc storage show postgis > /dev/null 2>&1 ||
        /snap/bin/lxc storage create postgis btrfs size=20GB
      register: _r
      changed_when:
        - '"Storage pool postgis created" in _r.stdout'

    - name: Create the postgis container
      tags:
        - lxd
        - forward
      lxd_container:
        name: postgis
        state: started
        profiles:
          - default
          - ssh_root
        config:
          limits.cpu: "4"
          limits.memory: "10GB"
        source:
          type: image
          mode: pull
          server: https://cloud-images.ubuntu.com/releases
          protocol: simplestreams
          alias: "20.04"
        devices:
          root:
            path: /
            type: disk
            pool: postgis
            size: "20GB"
        wait_for_ipv4_addresses: true
      register: _lxd

    - import_role: name=icos.lxd_forward
      tags: forward
      vars:
        lxd_forward_ip: "{{ postgis_ip }}"
        lxd_forward_name: postgis


- hosts: postgis
  become: true
  vars_files:
    - vault.yml
  tasks:
    - import_role: name=icos.lxd_guest
      tags: guest

    - import_role: name=icos.postgresql
      tags: postgresql
      vars:
        # Lock the version in case the role gets upgraded.
        postgresql_version: 12
        postgresql_postgis_enable: true
        postgresql_postgres_password: "{{ vault_postgis_postgres_password }}"
        postgresql_listen_addresses: "'*'"
        postgresql_ssh_keys: "{{ vault_postgis_extra_keys }}"

    - name: Install backup for postgresql
      tags: backup
      import_role:
        name: icos.postgresql
        tasks_from: backup
      vars:
        postgresql_backup_script: backup-dumpall-bbclient
        postgresql_bbclient_name: postgis

    - name: Allow postgres user to connect from same subnet
      tags: hba
      postgresql_pg_hba:
        dest: "{{ postgresql_hba_file }}"
        users: postgres
        source: samenet
        method: md5
        contype: hostssl

    # Switch to postgres so we use socket authentication.
    - become: true
      become_user: postgres
      tags: cplog
      block:
        - name: Create postgres cplog users
          postgresql_user:
            db: cplog
            name: "{{ item.username }}"
            password: "{{ item.password }}"
          loop: "{{ vault_postgis_cplog_users }}"

        - name: Allow users to connect from same subnet
          postgresql_pg_hba:
            dest: "{{ postgresql_hba_file }}"
            users: "{{ item.username }}"
            source: samenet
            method: md5
            contype: hostssl
          loop: "{{ vault_postgis_cplog_users }}"

        - name: Add the pg_stat_statements extension
          community.postgresql.postgresql_ext:
            name: pg_stat_statements
            db: cplog
            schema: public
