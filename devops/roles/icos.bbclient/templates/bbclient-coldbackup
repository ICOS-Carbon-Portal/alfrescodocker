#!/usr/bin/python3
# Shut down service. Do backup. Start service again.
# Designed to run from cron.

import sys
from os import access, X_OK, environ
from os.path import exists, isdir, getsize
from subprocess import run, DEVNULL, CalledProcessError

# The script relies on the current directory having a certain structure.
assert exists('docker-compose.yml')
assert isdir('volumes')
assert access('bin/bbclient-all', X_OK)

LOGSIZE = getsize('backup.log') if exists('backup.log') else 0
ARCHIVE = "%s-{now}" % (sys.argv+['test'])[1]

try:
    environ['BORG_UNKNOWN_UNENCRYPTED_REPO_ACCESS_IS_OK'] = 'yes'

    # If our docker-builds script is available then dump information about
    # currently running images. Don't care if it fails.
    run("docker-builds > volumes/build.info", shell=1, stderr=DEVNULL)

    run(['docker-compose', 'down'], stderr=DEVNULL, check=1)

    run('echo "=== starting backup $(date)" >> backup.log; '
        'bin/bbclient-all create --verbose --stats "::%s" volumes '
        '>> backup.log 2>&1' % ARCHIVE, shell=1, check=1)

    run(['docker-compose', 'up', '-d'], stderr=DEVNULL)

    run('echo "=== starting prune $(date)" >> backup.log; '
        'bin/bbclient-all prune --verbose --stats --keep-within 7d '
        '--keep-daily=30 --keep-weekly=150 >> backup.log 2>&1',
        shell=1, check=1)
except CalledProcessError:
    # In case of error, print logs created since we started.
    f = open('backup.log'); f.seek(LOGSIZE); print(f.read())  # noqa
finally:
    run(['docker-compose', 'up', '-d'], stderr=DEVNULL)
