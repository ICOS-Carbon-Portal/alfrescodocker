
cpmeta{
	stationLabelingService = null
	dataUploadService{
		metaServers = null
		metaServers.ICOSCities: "citymeta"
		collectionServers = null
		collectionServers.ICOSCities: "citycolls"
		documentServers = null
		documentServers.ICOSCities: "citydocs"
		handle{
			prefix.ICOSCities = ${cpmeta.dataUploadService.handle.prefix.ICOS}
			dryRun = false
		}
		etc.ingestFileMeta = false
	}
	instanceServers = null #to erase the settings for the other ENVRIES
	instanceServers{
		specific{
			instanceschema {
				writeContexts: ["http://meta.icos-cp.eu/ontologies/cpmeta/"]
				ingestion {
					ingesterId: "cpMetaOnto"
					ingestAtStartup: true
				}
			}
			cpmeta {
				logName: "citycpmeta"
				readContexts: [
					"http://meta.icos-cp.eu/ontologies/cpmeta/",
					"https://citymeta.icos-cp.eu/resources/cpmeta/",
					"https://citymeta.icos-cp.eu/documents/"
				]
				writeContexts: ["https://citymeta.icos-cp.eu/resources/cpmeta/"]
			}
			citymeta {
				logName: "citymeta"
				readContexts: [
					"http://meta.icos-cp.eu/ontologies/cpmeta/",
					"https://citymeta.icos-cp.eu/resources/cpmeta/",
					"https://citymeta.icos-cp.eu/resources/citymeta/",
					"https://citymeta.icos-cp.eu/documents/"
				]
				writeContexts: ["https://citymeta.icos-cp.eu/resources/citymeta/"]
			}
			citycolls:{
				logName: "citycolls"
				readContexts: [
					"https://citymeta.icos-cp.eu/collections/",
					"https://citymeta.icos-cp.eu/resources/cpmeta/",
					"http://meta.icos-cp.eu/ontologies/cpmeta/"
				]
				writeContexts: ["https://citymeta.icos-cp.eu/collections/"]
			}
			citydocs: {
				logName: "citydocs"
				readContexts: [
					"https://citymeta.icos-cp.eu/documents/",
					"http://meta.icos-cp.eu/ontologies/cpmeta/",
					"https://citymeta.icos-cp.eu/resources/cpmeta/"
				]
				writeContexts: ["https://citymeta.icos-cp.eu/documents/"]
			}
		}
		forDataObjects{
			ICOSCities{
				commonReadContexts: [
					"http://meta.icos-cp.eu/ontologies/cpmeta/",
					"https://citymeta.icos-cp.eu/resources/cpmeta/",
					"https://citymeta.icos-cp.eu/resources/citymeta/"
				]
				uriPrefix: "https://citymeta.icos-cp.eu/resources/"
				definitions: [
					{ label: "etcprodcsv", format: "http://meta.icos-cp.eu/ontologies/cpmeta/asciiEtcHalfHourlyProductTimeSer"},
					{ label: "etcmulti", format: "http://meta.icos-cp.eu/ontologies/cpmeta/etcRawTimeSerMultiZip"},
					{ label: "ziparch", format: "http://meta.icos-cp.eu/ontologies/cpmeta/zipArchive"}
				]
			}
		}
		metaFlow{
			_type = "cities"
			cpMetaInstanceServerId = "cpmeta"
			citiesMetaInstanceServerId = "citymeta"
			munichUpload{
				dirName = "midLowCostMunich"
				uploader = "mid-low-cost-sensors@munich"
			}
			parisUpload{
				dirName = "midLowCostParis"
				uploader = "mid-low-cost-sensors@paris"
			}
			zurichUpload{
				dirName = "midLowCostZurich"
				uploader = "mid-low-cost-sensors@zurich"
			}
		}
	}
	onto = null #to erase the stock app settings
	onto{
		ontologies: [
			{owlResource: "/owl/uiannotations.owl"},
			{owlResource: "/owl/cpmeta.owl"},
			{
				ontoId: "citymeta"
				owlResource: "/owl/citymetaui.owl"
			}
		]
		instOntoServers{
			cpmeta {
				serviceTitle: "Carbon Portal metadata instances for ICOS Cities"
				authorizedUserIds: []
				ontoId: "citymeta"
				instanceServerId: "cpmeta"
			}
			citymeta {
				serviceTitle: "Production metadata instances for ICOS Cities"
				authorizedUserIds: []
				ontoId: "citymeta"
				instanceServerId: "citymeta"
			}
		}
	}
	citations.eagerWarmUp = false
	statsClient.previews.dbNames.ICOSCities = "{{ restheart_cities_db_name }}"
}
