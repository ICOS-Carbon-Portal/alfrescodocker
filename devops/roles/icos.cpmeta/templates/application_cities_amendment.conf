
cpmeta{
	stationLabelingService = null
	dataUploadService{
		metaServers = null
		metaServers.ICOSCities: "citymeta"
		collectionServers = null
		collectionServers.ICOSCities: "citycolls"
		documentServers = null
		documentServers.ICOSCities: "citydocs"
		handle{
			prefix.ICOSCities = ${cpmeta.dataUploadService.handle.prefix.ICOS}
			dryRun = true
		}
		etc.ingestFileMetaAtStart = false
	}
	instanceServers = null #to erase the settings for the other ENVRIES
	instanceServers{
		specific{
			instanceschema {
				writeContexts: ["https://citymeta.icos-cp.eu/ontologies/cpmeta/"]
				ingestion {
					ingesterId: "cpMetaOnto"
					ingestAtStartup: true
				}
			}
			citymeta {
				logName: "citymeta"
				readContexts: [
					"https://citymeta.icos-cp.eu/ontologies/cpmeta/",
					"https://citymeta.icos-cp.eu/resources/cpmeta/",
					"https://citymeta.icos-cp.eu/documents/"
				]
				writeContexts: ["https://citymeta.icos-cp.eu/resources/cpmeta/"]
			}
			citycolls:{
				logName: "citycolls"
				readContexts: [
					"https://citymeta.icos-cp.eu/collections/",
					"https://citymeta.icos-cp.eu/resources/cpmeta/",
					"https://citymeta.icos-cp.eu/ontologies/cpmeta/"
				]
				writeContexts: ["https://citymeta.icos-cp.eu/collections/"]
			}
			citydocs: {
				logName: "citydocs"
				readContexts: [
					"https://citymeta.icos-cp.eu/documents/",
					"https://citymeta.icos-cp.eu/ontologies/cpmeta/",
					"https://citymeta.icos-cp.eu/resources/cpmeta/"
				]
				writeContexts: ["https://citymeta.icos-cp.eu/documents/"]
			}
		}
		forDataObjects{
			ICOSCities{
				commonReadContexts: [
					"https://citymeta.icos-cp.eu/ontologies/cpmeta/",
					"https://citymeta.icos-cp.eu/resources/cpmeta/"
				]
				uriPrefix: "https://citymeta.icos-cp.eu/resources/"
				definitions: [
					{ label: "ziparch", format: "http://meta.icos-cp.eu/ontologies/cpmeta/zipArchive"}
				]
			}
		}
	}
	onto = null #to erase the stock app settings
	onto{
		ontologies: [
			{owlResource: "/owl/uiannotations.owl"},
			{owlResource: "/owl/cpmeta.owl"},
			{
				ontoId: "cpmeta"
				owlResource: "/owl/cpmetaui.owl"
			}
		]
		instOntoServers{
			citymeta {
				serviceTitle: "Carbon Portal metadata instances for ICOS Cities"
				authorizedUserIds: []
				ontoId: "cpmeta"
				instanceServerId: "citymeta"
			}
		}
	}
	citations.eagerWarmUp = false
	statsClient.previews.dbNames.ICOSCities = "pauldb"
}

metacore.envriConfigs.ICOSCities{
	metaHost = "{{ cpmeta_cities_domain }}"
	dataHost = "{{ cpdata_cities_domain }}"
}

authPub.ICOSCities.authHost = "{{ cpauth_cities_domain }}"
