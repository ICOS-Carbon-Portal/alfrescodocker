#!/usr/bin/env -S just --working-directory . --justfile

set positional-arguments
set shell := ['/bin/bash', '-cu']

@_default:
    just --list --unsorted --justfile {{justfile()}}



# RUN
# https://github.com/jpetazzo/nsenter/blob/master/docker-enter
# https://github.com/jpetazzo/nsenter/commit/3d5dfca3e2cf670210ddebeb1837c4eabc0c46f8#
# This script does the same thing as 'docker exec' but with the added benefit
# of ignoring cgroups.
# "docker exec" but ignores cgroups
[group('run')]
exec container *args:
    #!/usr/bin/bash
    set -Eeo pipefail
    PID=$(docker inspect --format {{ '"{{.State.Pid}}"' }} "$1")
    [ -z "$PID" ] && exit 1
    shift

    if [ "$(id -u)" -ne "0" ]; then
        which sudo > /dev/null
        if [ "$?" -eq "0" ]; then
          LAZY_SUDO="sudo "
        else
          echo "Warning: Cannot find sudo; Invoking nsenter as the user $USER." >&2
        fi
    fi

    # Get environment variables from the container's root process
    ENV=$($LAZY_SUDO cat /proc/$PID/environ | xargs -0 | grep =)

    # Prepare nsenter flags
    OPTS="--target $PID --mount --uts --ipc --net --pid --"

    # env(1) is to clear all host environment variables and set then anew
    # No arguments, default to `su` which executes the default login shell
    if [ $# -lt 1 ]; then
        $LAZY_SUDO nsenter $OPTS env -i - $ENV su -m root
    else
        $LAZY_SUDO nsenter $OPTS env -i - $ENV "$@"
    fi


# NETWORK
# diff for ports between host and container
[group('network')]
ports name:
    #!/usr/bin/bash
    set -Eueo pipefail
    pid=$(docker inspect -f {{ '{{.State.Pid}}' }} {{name}})
    inside=$(mktemp)
    outside=$(mktemp)
    trap 'rm -f $inside $outside' EXIT
    ss -tulpn > $outside
    nsenter -t $pid -n ss -tulpn > $inside
    diff $outside $inside || :

# list allcontainer IDs along with their ip addresses
[group('network')]
ips:
    docker ps \
        | awk 'NR > 1 {print $1 }' \
        | xargs -rn 1 \
                docker inspect -f {{ "'{{ .Name }} {{ range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'" }}



# FILES
# extract file/dir from container/image
[group('files')]
extract *args:
    #!/usr/bin/bash
    set -Eueo pipefail
    if [[ $# -lt 2 ]]; then
        cat <<EOF
    usage: extract <obj> <src> [dst]

    Extract /entrypoint.sh from mycontainer into current directory.
      $ docker-extract mycontainer /entrypoint.sh

    Extract the entire /etc directory from the ubuntu image into /tmp.
      $ docker-extract ubuntu /etc /tmp
    EOF
        exit 0
    fi

    OBJ="$1"
    SRC="$2"
    DST="${3:-$PWD}"

    if [[ -e "$DST/${SRC##*/}" ]]; then
        echo "${SRC##*/} already exists in $DST, refusing to overwrite"
        exit 1
    fi

    # is object a container?
    if docker inspect -f {{ "'{{ .Image }}'"}} "$OBJ" >&/dev/null; then
        docker cp "$OBJ:$SRC" "$DST"
    # is object an image?
    elif docker inspect -f {{ "'{{ .RepoTags }}'" }} "$OBJ" >&/dev/null; then
        CID=$(docker create "$OBJ")
        trap 'docker rm "$CID" >/dev/null' EXIT
        docker cp "$CID:$SRC" "$DST"
    else
        echo "'$1' is neither a container nor an image."
        exit 1
    fi



# IMAGE
# list CMD and entrypoint of object
[group('inspect')]
entrypoint object:
   @docker inspect --format \
   "{{ 'ENTRYPOINT:{{ range .Config.Entrypoint }} {{.}}{{ end }}
CMD:{{ range .Config.Cmd }} {{.}}{{ end }}'}}" "{{object}}"


# show ancestry of image
[group('inspect')]
lineage image:
    #!/usr/bin/bash
    set -Eueo pipefail
    docker history -q "{{image}}" | grep -v '<missing>' | \
    while read -r id
    do
        docker inspect --type=image "$id" \
            | jq '.[0] | { RepoTag: .RepoTags[0], Parent }';
    done

