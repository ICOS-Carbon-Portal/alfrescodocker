---
- name: Include {{ project_name }} vars
  include_vars: "{{ project_name }}-vars.yml"

- name: Include {{ project_name }} vault
  include_vars: "{{ project_name }}-vault.yml"

- name: Include vars
  include_vars: drupal.yml

- name: Copy nginx {{ name }}.conf
  template:
    src: icos.conf
    dest: /etc/nginx/conf.d/{{ name }}.conf
    mode: 0700
  notify: reload nginx config
  when: project_name != "cp" and project_name != "ns"

- name: Get SSL certificate
  import_tasks: ssl-certificate.yml
  when: get_ssl

- name: Create project directory
  file:
    path: "{{ project_dir }}"
    state: directory

- name: Pull source code from git
  git:
    repo: https://github.com/ICOS-Carbon-Portal/drupal
    dest: "{{ project_dir }}"
    force: yes

- name: Restore file archives
  unarchive:
    src: "{{ backup_path }}/{{ project_name }}Drupal/files/{{ item }}.tar.gz"
    dest: /
  with_items:
    - files_backup
    - modules_backup
    - themes_backup
  when: restore

- name: Ensure {{ project_dir }}/files/default/ directory exists
  file: path={{ project_dir }}/files/default/ state=directory recurse=yes

- name: Copy settings.php
  template:
    src: settings.php.j2
    dest: "{{ project_dir }}/files/default/settings.php"

- name: Copy services.yml
  copy:
    src: services.yml
    dest: "{{ project_dir }}/files/default/"

# - name: Copy modules library
#   template:
#     src: "{{ item }}.libraries.yml.j2"
#     dest: "{{ project_dir }}/modules/{{ item }}/{{ item }}.libraries.yml"
#   with_items:
#     - cp_blogs
#     - cp_cmis
#     - cp_documents
#     - cp_events
#     - cp_files
#   notify: reload nginx config
#
# - name: Copy theme library
#   template:
#     src: cp_theme_d8.libraries.yml.j2
#     dest: "{{ project_dir }}/themes/cp_theme_d8/cp_theme_d8.libraries.yml"

- name: Copy docker-compose.yml
  template:
    src: docker-compose.yml.j2
    dest: "{{ project_dir }}/docker/docker-compose.yml"

- name: Copy environment file
  template:
    src: env.j2
    dest: "{{ project_dir }}/docker/.env"

- name: Run docker-compose
  docker_service:
    project_src: "{{ project_dir }}/docker"
    state: present
  notify: reload nginx config

- name: Restore database
  import_tasks: database.yml
  when: restore

- name: Setup backup script
  import_tasks: backup.yml
