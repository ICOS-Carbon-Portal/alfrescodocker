#!/bin/bash
# This is an high-level wrapper for creating Virtual Machines in the EGI
# federated cloud. It will use the occi command to create, list and delete
# VMs. We use our own occi wrapper(!) to setup a docker container and hardcode
# the occi endpoint.

set -e
set -u


# When creating VMs in the EGI cloud, give them this title. We'll treat all
# compute resources with this title as having been created by this script and
# thus free to manipulate at will.
TITLE="icos_stilt_worker"
# Max number of parallel occi instances. Since occi mostly does HTTP requests,
# they're slow but cheap to parallelize.
MAXPR=20

# Use occi to describe a VM and output "$RESOURCEID $TITLE $IP"
function func_describe {
	JQ='(.[] | .attributes.occi.core.title),(.[] |.links | .[] | select(.kind=="http://schemas.ogf.org/occi/infrastructure#networkinterface") | .attributes.occi.networkinterface.address)'
	s=$(occi -a describe -r $1 -o json | jq -r "$JQ" | sed -e 'N;s/\n/ /')
	echo "$1 $s"
}


# List all our VMs as: 'resource-id title IP', one per line.
function func_list {
	# List all compute resources tied to our user (certificate?). Then filter
	# out only the one that matches "$TITLE". Since
	occi -a list -r compute				   |
		sed -e 's/\r//'					   |
		xargs -P$MAXPR -n1 fedcloud _describe_ |
		grep "$TITLE"
}


# List our VMs and produce a ~/.ssh/config file
function func_update {
	tmp=$(mktemp /tmp/fedcloud.update.XXX)
	echo "# This file was autogenerated at $(date -Iseconds)" >> $tmp
	cnt=1
	func_list | sort | while read -r r _ ip; do
		c="\n# $r\n"
		c+="Host                    vm${cnt}\n"
		c+="  HostName              $ip\n"
		c+="  IdentityFile          ~/.ssh/fedcloud\n"
		c+="  User                  ubuntu\n"
		c+="  StrictHostKeyChecking no\n"
		echo -ne "$c" >> $tmp
		cnt=$((cnt + 1))
	done
	mv $tmp ~/.ssh/config

}


# Turn 'vm1 into 'https://carach5.ics.muni.cz:11443/compute/117440'
function host_to_resource_in_config {
	grep -B1 -e "^Host[[:blank:]]*$1" < .ssh/config |
		head -1										|
		awk '{ print $2}'
}

	
if [[ "${1:-}" == "--debug" ]]; then
	shift
	set -x
fi


case "${1:-}" in
	"_describe_")
		# "_describe_" is used when we call ourselves. Thus we don't need to run
		# 'init' before the actual describe.
		func_describe $2
		;;
	"describe")
		# Here the user has directly invoked 'describe' and we run 'init' first.
		occi init >& /dev/null
		func_describe $2
		;;
	"lookup")
		case "$2" in
			http*) echo "$2";;
			*) host_to_resource_in_config "$2";;
		esac
		;;
	"list")
		occi init >& /dev/null
		func_list
		;;
	"delete")
		occi init >& /dev/null
		host="$(fedcloud lookup $2)"
		if [[ -z "$host" ]]; then
			echo 'Unknown host/resource "$2"'
			exit 1
		else
			occi -a delete -r "$host"
		fi
		;;
	"update")
		occi init >& /dev/null
		func_update
		;;
	"create")
		occi init >& /dev/null
		RID=$(occi -a create -r compute \
				   --mixin http://occi.carach5.ics.muni.cz/occi/infrastructure/os_tpl#uuid_07fbd366_bbd2_5ca4_8f47_82c23ebc7d23_warg_default_shared_228 \
				   --mixin http://schemas.fedcloud.egi.eu/occi/infrastructure/resource_tpl#mem_extra_large \
				   --context user_data="file:///data/{{ fedcloud_integration_yml | basename }}" \
				   --attribute occi.core.title="$TITLE")
		func_describe $RID
		;;
	"-h" | "--help" | "help" | "")
		echo "usage: fedcloud [--debug] cmd [args]"
		echo "  list        - outputs a list of RESOURCEID TITLE IP"
		echo "  describe id - output RESOURCEID TITLE IP for given id"
		echo "  create      - create a new VM and output its resourceid"
		echo "  delete id   - delete a resourceid"
		echo "  update      - update ~/.ssh/config with our VMs"
		echo "  lookup host - Turn a hostname into resource id"
		;;
	*)
		echo 'Unknown command (try "help")'
		exit 1
		;;
esac
