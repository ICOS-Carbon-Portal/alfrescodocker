- name: Create database user
  user:
    name: "{{ pgrep_user }}"
    state: present
    create_home: no
    home: "{{ pgrep_home }}"
  register: _user

- name: Create pgrep home directory
  file:
    # We creating the build directory will create the actual home directory as
    # well while giving us a chance to register _build.
    path: "{{ pgrep_home }}/build"
    state: directory
  register: _build

- name: Create pgrep volume directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ _user.uid }}"
    group: "{{ _user.group }}"
    mode: 0700
  loop:
    - "{{ pgrep_home }}/volumes/data"

# We will leave the build requirements (indeed the whole build
# directory) since having them around aids debugging.
- name: Install docker build requirements
  template:
    dest: "{{ _build.path }}"
    src: "{{ item }}"
  loop:
    - Dockerfile
    - pgpass
    - entrypoint.sh

- name: Install peer certificate
  copy:
    src: "{{ pgrep_peer_cert }}"
    dest: "{{ _build.path }}/peer.crt"

- name: Install docker-compose.yml
  template:
    dest: "{{ pgrep_home }}/docker-compose.yml"
    src: docker-compose.yml
    mode: 0600

- name: Build image using docker-compose
  shell: |
    ( echo -n '=== starting build '; date; docker-compose build --pull ) \
    | tee -a build.log
  args:
    chdir: "{{ pgrep_home }}"
  register: _output
  changed_when: '" ---> Running in " in _output.stdout'

- name: Start containers
  docker_service:
    project_src: "{{ pgrep_home }}"

- name: Specialized psql scripts
  template:
    dest: "{{ pgrep_home }}/{{ item }}"
    src: "{{ item }}.sh"
    mode: 0755
  loop:
    - psql
    - psql_peer
    - ctl

- name: Install sql status file
  template:
    src: status.sql
    dest: "{{ pgrep_home }}/.status.sql"
    mode: 0755
