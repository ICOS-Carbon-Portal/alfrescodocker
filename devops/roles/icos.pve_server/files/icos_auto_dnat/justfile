python := "python3.11"

remote_host := "fsicos4"
remote_path := "/opt/icos-auto-dnat"
remote_pipx := "pipx-global"

project_name := "icos-auto-dnat"


@_default:
    just --list --unsorted


# PROJECT
# run program using hatch
[group('project')]
run *args:
    hatch run "$@"

# show versions of installed dependencies
[group('project')]
freeze:
    hatch run pip freeze

# hatch env remove
[group('project')]
remove:
    hatch env remove

# remove all artifacts
[group('project')]
clean:
    fd -u __pycache__   -X rm -r
    fd -u .pytest_cache -X rm -r
    fd -u .mypy_cache   -X rm -r
    fd -u .coverage     -X rm -r
    rm -rf -- ./htmlcov ./build ./dist src/*.egg-info .ruff_cache



# RUN TEST COVERAGE
# -s      -- show output
# -k expr -- run only tests matching expr
# pytest
[group('pytest')]
test *args:
    hatch run pytest {{args}}

# list collected tests
[group('pytest')]
collect *args:
    hatch run pytest --collect-only {{args}}

# show results from coverage+pytest
[group('pytest')]
coverage:
    hatch run coverage run -m pytest
    hatch run coverage combine
    hatch run coverage html
    hatch run python3 -m webbrowser htmlcov/index.html



# RUFF
# ruff check
[group('ruff'),no-cd]
check *args=("."):
    hatch run ruff check "$@"

# ruff check --fix-only
[group('ruff'),no-cd]
fix *args=("."):
    hatch run ruff check --fix-only "$@"

# format python code with ruff
[group('ruff'),no-cd]
format *args=("."):
    hatch run ruff format "$@"



# PIPX
# install on localhost using pipx
[group('pipx')]
install:
    pipx install --force --editable --python={{python}} .

# pipx uninstall and hatch remove
[group('pipx')]
uninstall:
    -pipx uninstall {{project_name}}
    hatch env remove

# install on remote host using pipx-global
[group('pipx')]
push host:
    rsync -F -rlptD . {{host}}:{{remote_path}}
    ssh {{host}} -- \
    {{remote_pipx}} install -f -e --python={{python}} {{remote_path}}



# MUTAGEN
# configure mutagen
[group('mutagen')]
mutconf:
    cog -r -Dhost={{remote_host}} -Dhome={{remote_path}} mutagen.yml

# start syncing using mutagen
[group('mutagen')]
mutup host path=remote_path:
    -mutagen project terminate
    mutagen project start

# mutagen stop
[group('mutagen')]
mutdown:
    -mutagen project terminate
