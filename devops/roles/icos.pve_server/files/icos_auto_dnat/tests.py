# ruff: noqa: S101,E501
import traceback

import pytest
from freezegun import freeze_time

import icos_auto_dnat
from icos_auto_dnat import DNAT

LEASES = """\
1701713554 82:7d:c6:15:9a:fe 10.10.10.154 stiltcluster \
ff:ca:53:09:5a:00:02:00:00:ab:11:d7:3a:d5:28:90:af:8d:4f
1701713374 26:00:3f:50:df:cb 10.10.10.227 jupyter \
ff:ca:53:09:5a:00:02:00:00:ab:11:4a:3e:d0:7c:11:db:dd:00
"""

IPTABLES = """\
# Generated by iptables-save v1.8.9 on Mon Dec  4 09:54:37 2023
*nat
:PREROUTING ACCEPT [37237:6869397]
:INPUT ACCEPT [3140:227806]
:OUTPUT ACCEPT [8078:530231]
:POSTROUTING ACCEPT [8097:531310]
:ICOS-DNAT - [0:0]
-A PREROUTING -j ICOS-DNAT
-A POSTROUTING -s 10.10.10.0/24 -o ens5f1 -j MASQUERADE
-A ICOS-DNAT -i ens5f1 -p tcp -m tcp --dport 60601 -m comment --comment "(auto) ssh to stiltcluster" -j DNAT --to-destination 10.10.10.154:22
-A ICOS-DNAT -i ens5f1 -p tcp -m tcp --dport 60602 -m comment --comment "(auto) ssh to jupyter" -j DNAT --to-destination 10.10.10.227:22
COMMIT
"""

QM_LIST = """\
     VMID NAME                 STATUS     MEM(MB)    BOOTDISK(GB) PID
       100 node                 stopped    512                2.00 0
       101 stiltcluster         running    500000           500.00 193155
       102 jupyter              running    500000           500.00 194497
       901 debian-12-generic-cloud-amd64 stopped    512                2.00 0
"""

QM_CONFIG_101 = """\
agent: enabled=1
boot: order=scsi0
description: port 60601
vga: serial0
vmgenid: 8b4271c0-a7a0-43e4-aba2-24d72230aed7
"""


# TESTS
def test_cli_help(cli_runner):
    r = cli_runner.invoke(icos_auto_dnat.cli, "--help")
    assert r.exit_code == 0, traceback.print_exception(*r.exc_info)


def test_parse_leases(tmp_path):
    lf = tmp_path / "leases"
    lf.write_text(LEASES, encoding="utf-8")
    r = list(icos_auto_dnat.parse_dnsmasq_leases(lf))
    assert r == [("10.10.10.154", "stiltcluster"), ("10.10.10.227", "jupyter")]


def test_parse_leases_stale(tmp_path):
    lf = tmp_path / "leases"
    lf.write_text(LEASES, encoding="utf-8")
    with freeze_time("2500-01-01"):
        with pytest.raises(RuntimeError):
            _ = list(icos_auto_dnat.parse_dnsmasq_leases(lf))


def test_parse_icos_dnat(monkeypatch):
    monkeypatch.setattr(
        icos_auto_dnat, "check_output", lambda *_, **__: IPTABLES
    )
    r = list(icos_auto_dnat.parse_icos_dnat())
    a = [
        DNAT(
            hport="60601",
            comment="(auto) ssh to stiltcluster",
            ip="10.10.10.154",
            dport="22",
            line='-i ens5f1 -p tcp -m tcp --dport 60601 -m comment --comment "(auto) ssh to stiltcluster" -j DNAT --to-destination 10.10.10.154:22',
        ),
        DNAT(
            hport="60602",
            comment="(auto) ssh to jupyter",
            ip="10.10.10.227",
            dport="22",
            line='-i ens5f1 -p tcp -m tcp --dport 60602 -m comment --comment "(auto) ssh to jupyter" -j DNAT --to-destination 10.10.10.227:22',
        ),
    ]

    assert r == a


def test_parse_dnat_rule_error():
    with pytest.raises(ValueError):
        icos_auto_dnat.parse_dnat_rule("")


def test_qm_name_to_vmid(monkeypatch):
    def check_output(args, **_):
        match args:
            case ["/usr/sbin/qm", "list"]:
                return QM_LIST
            case ["/usr/sbin/qm", "config", "101"]:
                return QM_CONFIG_101
            case _:
                raise Exception(args)

    monkeypatch.setattr(icos_auto_dnat, "check_output", check_output)

    assert icos_auto_dnat.qm_name_to_vmid("stiltcluster") == "101"
    assert icos_auto_dnat.qm_name_to_vmid("jupyter") == "102"
    assert icos_auto_dnat.qm_name_to_vmid("nosuch") is None
    assert icos_auto_dnat.qm_name_to_port("stiltcluster") == "60601"


def test_run(capfd):
    cmd = "stat /tmp | head -1"

    icos_auto_dnat.run(cmd)
    c = capfd.readouterr()
    assert c.out.splitlines() == [f">>> cmd='{cmd}' <<<", "  File: /tmp"]

    icos_auto_dnat.run.dry_run = True
    icos_auto_dnat.run(cmd)
    c = capfd.readouterr()
    assert c.out.splitlines() == [f">>> cmd='{cmd}' <<<"]


def test_auto_bridge(monkeypatch, capfd):
    monkeypatch.setattr(
        icos_auto_dnat, "ip_json", lambda _: [{}, {}, {}, {}, {}]
    )
    with pytest.raises(SystemExit):
        icos_auto_dnat.auto_bridge()
    c = capfd.readouterr()
    assert c.err.strip() == "No bridges detected"

    monkeypatch.setattr(icos_auto_dnat, "ip_json", lambda _: [{"ifname": "a"}])
    assert icos_auto_dnat.auto_bridge() == "a"

    monkeypatch.setattr(
        icos_auto_dnat, "ip_json", lambda _: [{"ifname": "a"}, {"ifname": "b"}]
    )
    with pytest.raises(SystemExit):
        icos_auto_dnat.auto_bridge()
    c = capfd.readouterr()
    assert c.err.startswith("More than one bridge")

    monkeypatch.setattr(icos_auto_dnat, "ip_json", lambda _: None)
    with pytest.raises(SystemExit):
        icos_auto_dnat.auto_bridge()
    c = capfd.readouterr()
    assert c.err.startswith("Could not parse")
