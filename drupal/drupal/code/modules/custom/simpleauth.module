<?php

/**
 * @file
 * 
 * A module that take for granted that some authentication has been externally done
 * and take a few URL params to compose an unique username and then load the user from the database.
 * If the user doesn't exists the user will be created. 
 * 
 * The querystring must be like ?login=1&givenName=some_givenName&surname=some_surname&mail=some@mail
 * 
 * The module will also support a creation of a link to a external login service.
 */


/**
 *
 */
function simpleauth_block_info() {
	$blocks['simpleauth'] = array(
			'info' => t('Simple Auth'),
			'cache' => DRUPAL_CACHE_PER_ROLE,
	);
	
	
	// An button which make a callback to an external loginfunction
	$blocks['simpleauth_external_login'] = array(
			'info' => t('Simple Auth External Login'),
			'cache' => DRUPAL_CACHE_PER_ROLE,
	);
	

	return $blocks;
}


/**
 * 
 */
function simpleauth_help($address, $arg) {
	
	$value = "<p>
			A module that take for granted that some authentication has been externally done
 			<br/>and take a few URL params to compose an unique username and then load the user from the database.
			<br/>If the user doesn't exists the user will be created.
			<br/><br/>The querystring must be like:
			<br/>?login=1&givenName=some_givenName&surname=some_surname&mail=some@mail
			<br/><br/>The module will also support a creation of a link to a external login service.
			</p>";
	
	switch ($address) {
		case "admin/help#simpleauth":
			return t($value);
			break;
	}

}


/**
 * Initiates the module
 */
function simpleauth_init() {
	
	if (isset($_GET['login']) 
			&& $_GET['login'] == 1 
			&& isset($_GET['givenName'])
			&& $_GET['givenName'] != ''
			&& isset($_GET['surname'])
			&& $_GET['surname'] != ''
			&& isset($_GET['mail'])
			&& $_GET['mail'] != '') {
				
		require_once DRUPAL_ROOT . '/modules/user/user.module';
		
		$loaded = false;
		
		// We must have a valid mail address 
		if (checkEmail($_GET['mail'])) {
			$username = buildUsername($_GET['givenName'], $_GET['surname'], $_GET['mail']);
			
			// We try to load user.
			if (tryToLoadUser($username)) {
				// User loaded
				$loaded = true;
				
			// Well.. we couldn't load user but we mayby shall create a new account.	
			} else {
				createNewUser($username, $_GET['mail']);
				
				if (tryToLoadUser($username)) {
					// User loaded
					$loaded = true;
				}
	
			} 

		}
		
		// If we not could load user.. Clear an eventually existed user session
		if (! $loaded && user_is_logged_in()) {
			session_destroy();
			drupal_goto('/');
		}	
	}	
}


/**
 * Load the user if exists
 */
function tryToLoadUser($username) {
	
	if ($username != '') {
		
		$account = user_load_by_name($username);
		
		if ($account) {
			$uid = $account->uid;	
		}
		
		if (isset($uid)) {
			$form_state['uid'] = $uid;
			user_login_submit(array(), $form_state);
			
			return true;
			
		} else {
			watchdog('user', 'User ' . $username . ' could not login.', array(), WATCHDOG_NOTICE);
			
			return false;
			
		}
	}
}


/**
 * Create a new user
 * 
 * @param name
 *   The username
 *   
 * @param email
 *   The email address
 */
function createNewUser($username, $mail) {
	
	$role = getRoleIdFromDB('authenticated user');
	if (variable_get('simpleauth_role')) {
		$role = variable_get('simpleauth_role');
	}
	
	$passwd = mt_rand(1000, mt_getrandmax());
	
	$user = array(
			'name' => $username,
			'pass' => $passwd,
			'mail' => $mail,
			'status' => 1,
			'init' => $mail,
			'roles' => array(
					DRUPAL_AUTHENTICATED_RID => true,
					$role => true)
	);
	
	user_save(null, $user);	
	
}


/**
 * Check if an email address is valid
 * 
 * @param email
 *   Email address
 */
function checkEmail($mail) {
	if (! filter_var($mail, FILTER_VALIDATE_EMAIL)) {
		return false;	
	}
	
	return true;
	
}


/**
 * If the loginblock is enabled and a user is not logged in this will add a link to a defined service
 */
function simpleauth_block_view($delta = '') {

	if (! user_is_logged_in()) {

		switch ($delta) {
			case 'simpleauth_external_login':

				$address = '';
				if (variable_get('simpleauth_external_login_address')) {
					$address = variable_get('simpleauth_external_login_address');
					$address = trim($address);	
				}
				
				$param = '';
				if (variable_get('simpleauth_external_login_param')) {
					$param = variable_get('simpleauth_external_login_param');
					$param = trim($param);
				}

				$query = '';
				if ($_SERVER['QUERY_STRING']) {
					$query = $_SERVER['QUERY_STRING'];
				}
				
				
				// In case of redundant information in incoming querystring
				if ($query == $param) {
					$query = '';
					
				} elseif (strpos($query, '&' . $param) > 0) {
					$query = str_replace('&' . $param, '', $query);
				}
				
				
				
				$questionmark = '?';
				$ampersand = '&';
				
				if ($param == '' && $query == '') {
					$questionmark = '';
				}
				
				if ($query == '') {
					$ampersand = '';
				}
				
				
				$request = $address . $questionmark . $query . $ampersand . $param;
					
				
				$block = array();
				$block['subject'] = t('Login');
				$block['content'] = '<a href="' . $request . '">Login</a>';
				
				return $block;
					
		}	
	}
}


/**
 * Configuration
 */
function simpleauth_menu() {
	$items = array();
	
	$items['admin/config/content/simpleauth'] = array(
			'title' => 'Simple Auth',
			'description' => 'Configuration for Simple Auth module',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('role_form'),
			'access arguments' => array('access administration pages'),
			'type' => MENU_NORMAL_ITEM,
	);
	
	
	$items['admin/config/content/simpleauth_external_login'] = array(
			'title' => 'Simple Auth External login',
			'description' => 'Configuration for Simple Auth External login',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('external_login_form'),
			'access arguments' => array('access administration pages'),
			'type' => MENU_NORMAL_ITEM,
	);

	return $items;
}


/**
 * Configuration - manage the default role
 * 
 * The role as administrator (rid 3) will not be presented. 
 */
function role_form($form, &$form_state) {
	
	$currentRole = 'not defind yet';
	if (variable_get('simpleauth_role')) {
		$currentRole = getRoleNameFromDB(variable_get('simpleauth_role'));
	}
	
	
	$roles = user_roles();
	$admin = getRoleIdFromDB('administrator');
	unset($roles[$admin]);
	
	
	$form['simpleauth_role'] = array(
			'#type' => 'select',
			'#title' => t('Select default role'),
			'#options' => $roles,
			'#description' => t('Set default role which will be the role for a new user created by Simple Auth ( current role is <b>'. $currentRole .'</b> ).'),
			'#required' => TRUE,
	);
	
	return system_settings_form($form);
}



/**
 * Configuration - manage the path and name of the querystring to the external login service
 */
function external_login_form($form, &$form_state) {
	
	$address = '';
	if (variable_get('simpleauth_external_login_address')) {
		$address = variable_get('simpleauth_external_login_address');
	}
	
	$param = '';
	if (variable_get('simpleauth_external_login_param')) {
		$param = variable_get('simpleauth_external_login_param');
	}
	
	
	$form['simpleauth_external_login_address'] = array(
			'#type' => 'textfield',
			'#title' => t('Assign a address to the login service'),
			'#description' => t('If a address to the login service is other than this site.'),
			'#required' => FALSE,
			'#default_value' => $address,
	);
	
	$form['simpleauth_external_login_param'] = array(
			'#type' => 'textfield',
			'#title' => t('Assign a parameter to the querystring'),
			'#description' => t('If a parameter is to be included in the querystring to the login service. <br/>E.g. a proxy address.'),
			'#required' => FALSE,
			'#default_value' => $param,
	);
	
	return system_settings_form($form);
}


/**
 * Get role name by role id from database
 * 
 * @param id
 *   The rid of the role
 */
function getRoleNameFromDB($id) {
	$roleId = array(':rid' => $id);
	
	$role = '';
	
	$sql = 'select r.name from {role} r where r.rid = :rid';
	$query = db_query($sql, $roleId);
	
	if ($query) {
		while ($row = $query->fetchAssoc()) {
			$role = $row['name'];
		}
	}
	
	return $role;
}


/**
 * Get role id by role name from database
 *
 * @param name
 *   The name of the role
 */
function getRoleIdFromDB($name) {
	$roleName = array(':name' => $name);

	$id = '';

	$sql = 'select r.rid from {role} r where r.name = :name';
	$query = db_query($sql, $roleName);

	if ($query) {
		while ($row = $query->fetchAssoc()) {
			$id = $row['rid'];
		}
	}

	return $id;
}


/**
 * Builds up an unique username based on all params
 * 
 * @param
 *   Givenname
 * 
 * @param
 * 	 Surname
 * 
 * @param
 *   Mailaddress
 */
function buildUsername($givenName, $surname, $mail) {
	$givenName = trim($givenName);
	$givenName = ucfirst($givenName);
	
	$surname = trim($surname);
	$surname = ucfirst($surname);
	
	$mail = trim($mail);
	$mail = str_replace('@', ' at ', $mail);
	
	
	return $givenName . ' ' . $surname . ' ' . $mail;
	
}